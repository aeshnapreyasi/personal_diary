import tkinter as tk
from tkinter import messagebox
import mysql.connector


class PersonalDiary:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Diary")

        # MySQL connection setup
        self.conn = mysql.connector.connect(
            host='127.0.0.1',
            user='root',  
            password='', 
            database='personal_diary',
            port=3307
        )
        self.cursor = self.conn.cursor()

        # Create frames
        self.login_frame = tk.Frame(self.root)
        self.diary_frame = tk.Frame(self.root)

        self.create_login_frame()
        self.create_diary_frame()

        self.login_frame.pack(pady=20)

    def create_login_frame(self):
        tk.Label(self.login_frame, text="Username:").grid(row=0, column=0)
        self.username_entry = tk.Entry(self.login_frame)
        self.username_entry.grid(row=0, column=1)

        tk.Label(self.login_frame, text="Password:").grid(row=1, column=0)
        self.password_entry = tk.Entry(self.login_frame, show='*')
        self.password_entry.grid(row=1, column=1)

        self.login_button = tk.Button(self.login_frame, text="Login", command=self.login)
        self.login_button.grid(row=2, columnspan=2, pady=10)

    def create_diary_frame(self):
        tk.Label(self.diary_frame, text="My Diary", font=("Arial", 16)).pack(pady=10)

        self.diary_text = tk.Text(self.diary_frame, height=15, width=50)
        self.diary_text.pack(padx=10, pady=10)

        self.save_button = tk.Button(self.diary_frame, text="Save Entry", command=self.save_entry)
        self.save_button.pack(pady=5)

        # Display previous entries
        self.display_entries()

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if username == "user" and password == "pass":
            self.login_frame.pack_forget()
            self.diary_frame.pack(pady=20)
        else:
            messagebox.showerror("Login Failed", "Invalid username or password")

    def save_entry(self):
        diary_content = self.diary_text.get("1.0", tk.END).strip()
        if diary_content:
            self.cursor.execute('INSERT INTO entries (content) VALUES (%s)', (diary_content,))
            self.conn.commit()
            messagebox.showinfo("Saved", "Diary entry saved!")
            self.diary_text.delete("1.0", tk.END)
            self.display_entries()  # Update displayed entries
        else:
            messagebox.showwarning("Warning", "Please write something before saving.")

    def display_entries(self):
        # Clear the text area before displaying new entries
        self.diary_text.delete("1.0", tk.END)

        self.cursor.execute('SELECT content FROM entries')
        entries = self.cursor.fetchall()

        for entry in entries:
            self.diary_text.insert(tk.END, entry[0] + "\n\n")  # Add each entry to the text widget

    def on_closing(self):
        self.cursor.close()
        self.conn.close()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = PersonalDiary(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
